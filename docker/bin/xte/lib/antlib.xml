<?xml version="1.0" encoding="UTF-8"?>
<antlib xmlns:antlib="antlib:org.apache.tools.ant" xmlns:if="ant:if" xmlns:unless="ant:unless">

    <!--
      Macro: select-files
      - Computes includes_file_present based on an includes file path
      - Defines a fileset with either includesfile or a glob pattern

      Attributes:
        dir          : Base directory for fileset
        pattern      : Glob for files when includes file is absent (default: *.xml)
        includes_file: Path to includes file (default matches current build's default)
        filesetid    : ID to assign to the created fileset (default: original_xml)
    -->
    <macrodef name="select-files">
        <attribute name="dir"/>
        <attribute name="pattern" default="*.xml"/>
        <attribute name="includesFile" default="/tmp/opt/cdcp/includes.txt"/>
        <attribute name="filesetId" default="original_xml"/>
        <sequential>
            <!-- Determine if the includes file exists -->
            <available file="@{includesFile}" property="includes_file_present"/>

            <!-- Define the fileset for downstream tasks -->
            <fileset id="@{filesetId}" dir="@{dir}">
                <patternset>
                    <includesfile name="@{includesFile}" if:true="${includes_file_present}"/>
                    <include name="@{pattern}" unless:true="${includes_file_present}"/>
                </patternset>
            </fileset>
        </sequential>
</macrodef>

    <!--
      Macro: requested-files
      - Returns a newline-delimited list of requested items.
      - If an includes file exists, returns its contents verbatim.
      - Otherwise, if no 'excludes' property is defined, returns files-to-process as-is.

      Attributes:
        includesFile   : Path to includes file (default matches current build's default)
        files          : Value for files-to-process fallback (default: ${files-to-process})
        property       : Property name to set with the newline-delimited result (default: requested.files)
    -->
    <macrodef name="requested-files">
        <attribute name="includesFile" default="/tmp/opt/cdcp/includes.txt"/>
        <attribute name="files" default="${files-to-process}"/>
        <attribute name="property" default="requested.files"/>
        <sequential>
            <!-- Determine if the includes file exists -->
            <available file="@{includesFile}" property="rf.includes.exists"/>

            <!-- Determine if an 'excludes' property is present -->
            <condition property="rf.excludes.exists" value="true" else="false">
                <isset property="excludes"/>
            </condition>

            <!-- Prefer includes file contents when present -->
            <sequential if:true="${rf.includes.exists}">
                <loadfile property="@{property}" srcFile="@{includesFile}"/>
            </sequential>

            <!-- Fallback to files-to-process only when 'excludes' is not defined -->
            <sequential unless:true="${rf.includes.exists}">
                <sequential unless:true="${rf.excludes.exists}">
                    <property name="@{property}" value="@{files}"/>
                </sequential>
            </sequential>
        </sequential>
    </macrodef>

    <!--
      Macro: xslt-transform
      - Transforms files from a fileset using a given XSLT
      - Optionally expands schema default attributes via Saxon feature

      Attributes:
        dest                   : Destination directory for transformed output
        xslt                   : Path to the XSLT stylesheet entrypoint
        extension              : Output file extension (e.g., .xml, .html)
        filesetrefid           : RefID of the input fileset to transform
        expand-default-attributes: Toggle expansion of schema default attributes (true/false)
    -->
    <macrodef name="xslt-transform">
        <attribute name="dest"/>
        <attribute name="xslt"/>
        <attribute name="extension"/>
        <attribute name="filesetrefid"/>
        <attribute name="expand-default-attributes"/>

        <sequential>
            <fileset id="files" refid="@{filesetrefid}"/>

            <condition property="files.for.processing" value="true" else="false">
                <length string="${toString:files}" when="greater" length="0"/>
            </condition>
            <echo level="debug" message="${toString:files}"/>
            <echo level="error" message="ERROR: No files to transform in @{filesetrefid}"
                unless:true="${files.for.processing}"/>

            <sequential if:true="${files.for.processing}">
                <echo level="info" message="INFO: Using ${XSLT_ENTRYPOINT}"/>
                
                <condition property="debug.enabled" value="true" else="false">
                    <equals arg1="${ANT_LOG_LEVEL}" arg2="debug" trim="true"/>
                </condition>
                <sequential if:true="${debug.enabled}">
                    <pathconvert property="files.list" pathsep=", ">
                        <resources refid="files"/>
                    </pathconvert>
                    <echo level="debug" message="DEBUG: Files: ${files.list}"/>
                </sequential>
        
                <echo level="info" message="INFO: No expansion of default attributes defined in the schema" unless:true="${expand-default-attributes}"/>
                <echo level="info" message="INFO: Default attributes defined in the schema expanded" if:true="${expand-default-attributes}"/>


                <xslt destdir="@{dest}" style="@{xslt}" force="true" useimplicitfileset="false"
                    extension="@{extension}" reloadstylesheet="true"
                    unless:true="@{expand-default-attributes}" failOnError="false"
                    failOnTransformationError="false">
                    <fileset refid="@{filesetrefid}"/>
                    <factory name="net.sf.saxon.BasicTransformerFactory">
                        <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                        <attribute name="http://saxon.sf.net/feature/expandAttributeDefaults"
                            value="off"/>
                    </factory>
                    <param name="fragment-output-dir" expression="${fragment-output-dir}"/>
                </xslt>

                <xslt destdir="@{dest}" style="@{xslt}" force="true" useimplicitfileset="false"
                    extension="@{extension}" reloadstylesheet="true"
                    if:true="@{expand-default-attributes}" failOnError="false"
                    failOnTransformationError="false">
                    <fileset refid="@{filesetrefid}"/>
                    <factory name="net.sf.saxon.BasicTransformerFactory">
                        <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                    </factory>
                    <param name="fragment-output-dir" expression="${fragment-output-dir}"/>
                </xslt>
            </sequential>
        </sequential>
    </macrodef>

    <!--
      Macro: clean-dir-if-changed
      - Performs a boolean check comparing two directory properties.
      - When they differ, sets a caller-specified property to true,
        deletes the new_dir, and recreates it. Otherwise sets it to false.

      Attributes:
        propertyName : Name of the boolean property to set (e.g., cleanup.data.final)
        new_dir      : Name of the property holding the target directory path
        old_dir      : Name of the property holding the source directory path to compare against
    -->
    <macrodef name="clean-dir-if-changed">
        <attribute name="new-dir"/>
        <attribute name="old-dir"/>
        <sequential>
            <!-- Compute boolean indicating whether the dirs differ -->
            <local name="dirname.different"/>
            <condition property="dirname.different" value="true" else="false">
                <not>
                    <equals arg1="@{new-dir}" arg2="@{old-dir}" trim="true"/>
                </not>
            </condition>
            <echo message="Removing @{new-dir} (different @{old-dir})" if:true="${dirname.different}" level="info"/>
            <!-- Conditionally clean and recreate the target directory -->
            <retry retrycount="6" if:true="${dirname.different}">
                <delete dir="${@{new-dir}}" failonerror="no" />
            </retry>
            <echo message="Creating @{new-dir} (different @{old-dir})" if:true="${dirname.different}" level="info"/>
            <mkdir dir="@{new-dir}" if:true="@{dirname.different}"/>
        </sequential>
    </macrodef>
</antlib>
