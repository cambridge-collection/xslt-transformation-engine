<?xml version="1.0" encoding="UTF-8"?>
<project name="TranformsXml" basedir=".." default="full"
    xmlns:if="ant:if"
    xmlns:unless="ant:unless"
    xmlns:fs="antlib:cudl.fs">
    <dirname property="buildfile.dir" file="${ant.file}"/>

    <property environment="env"/>
    <property name="ENVIRONMENT" value="${env.ENVIRONMENT}"/>
    <property name="ANT_LOG_LEVEL" value="${env.ANT_LOG_LEVEL}"/>

    <!-- Load reusable xte macros -->
    <typedef file="${basedir}/bin/xte/lib/antlib.xml" uri="antlib:cudl.fs"/>

    <!-- The following switches can be passed when invoking ant to provide custom values -->
    <property name="data.dir"  location="./source"/><!-- Source of the original data files -->
    <property name="dist.dir"  location="./out"/><!-- Final dist dir (standalone build only) -->

    <property name="dist-pending.dir"  location="./dist-pending"/><!-- Initial output directory -->
    
    <condition property="files-to-process" value="${env.TEI_FILE}" else="*.xml"><!-- File(s) to build -->
        <isset property="env.TEI_FILE"/>
    </condition>
    <property name="includes_file" value="/tmp/opt/cdcp/includes.txt"/><!-- Default path for includes file; overridden by -Dincludes_file -->

    <property name="tmp.dir"  location="./tmp"/><!-- Target directory for the TEI XML page extract files -->
    <property name="dev.null"  location="./dev.null"/><!-- Destination directory for empty junk files created by ant's xslt task when running pagify.xsl -->

    <!-- Final S3 Destinations -->
    <property name="AWS_OUTPUT_BUCKET" value="${env.AWS_OUTPUT_BUCKET}"/>

    <!-- XSLT File to use -->
    <property name="XSLT_ENTRYPOINT" value="${env.XSLT_ENTRYPOINT}"/>
    <property name="OUTPUT_EXTENSION" value="${env.OUTPUT_EXTENSION}"/>
    <property name="EXPAND_DEFAULT_ATTRIBUTES" value="${env.EXPAND_DEFAULT_ATTRIBUTES}"/>

    <!-- Comprehensive builds -->

    <target name="full" depends="cleanup, run.prehook, transcripts">
        <antcall target="release-outputs"/>
        <antcall target="cleanup"/>
    </target>

    <target name="transcripts" depends="if.expand-default-attributes, cleanup">
        <!-- Compute includes_file_present and define fileset -->
        <fs:select-files dir="${data.dir}" pattern="${files-to-process}" includesFile="${includes_file}" filesetId="original_xml"/>

        <echo level="info" message="INFO: Transforming list from ${includes_file} using ${XSLT_ENTRYPOINT}" if:true="${includes_file_present}"/>
        <echo level="info" message="INFO: Transforming files matching '${files-to-process}' using ${XSLT_ENTRYPOINT}" unless:true="${includes_file_present}"/>

        <echo level="info" message="INFO: No expansion of default attributes defined in the schema" unless:true="${expand-default-attributes}"/>
        <echo level="info" message="INFO: Default attributes defined in the schema expanded" if:true="${expand-default-attributes}"/>

        <xslt destdir="${dist-pending.dir}" style="./${XSLT_ENTRYPOINT}" force="true" useimplicitfileset="false" extension=".${OUTPUT_EXTENSION}" reloadstylesheet="true" unless:true="${expand-default-attributes}">
            <fileset refid="original_xml"/>
            <factory name="net.sf.saxon.BasicTransformerFactory">
                <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                <attribute name="http://saxon.sf.net/feature/expandAttributeDefaults" value="off"/>
            </factory>
        </xslt>

        <xslt destdir="${dist-pending.dir}" style="./${XSLT_ENTRYPOINT}" force="true" useimplicitfileset="false" extension=".${OUTPUT_EXTENSION}" reloadstylesheet="true" if:true="${expand-default-attributes}">
            <fileset refid="original_xml"/>
            <factory name="net.sf.saxon.BasicTransformerFactory">
                <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
            </factory>
        </xslt>
    </target>

     <!-- Private tasks called from main tasks -->

    <target name="release-outputs" depends="if.standalone.environment">
        <antcall target="run.posthook"/>
        <antcall if:true="${is.standalone.environment}" target="_copy_to_dist"/>
        <antcall unless:true="${is.standalone.environment}" target="_copy_to_s3"/>
    </target>

    <target name="_copy_to_dist">
        <copy todir="${dist.dir}">
            <fileset dir="${dist-pending.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <target name="_copy_to_s3">
        <parallel>
            <!-- NB: Uncomment the following line to copy original TEI to dist -->
            <!--<antcall target="_copy_tei_full_to_s3"/>-->
            <antcall target="_copy_www_to_s3"/>
        </parallel>
    </target>

    <target name="_copy_www_to_s3">
        <condition property="www.exists" value="true" else="false">
            <available file="${dist-pending.dir}" type="dir"/>
        </condition>
        <echo level="info" if:true="${www.exists}" message="INFO: Copying ${dist-pending.dir} to S3://${AWS_OUTPUT_BUCKET}"/>
        <exec if:true="${www.exists}" executable="aws" resolveexecutable="true">
            <arg value="s3"/>
            <arg value="sync"/>
            <arg value="--quiet"/>
            <arg value="${dist-pending.dir}"/>
            <arg value="s3://${AWS_OUTPUT_BUCKET}"/>
        </exec>
    </target>

    <target name="if.standalone.environment">
        <condition property="is.standalone.environment" value="true" else="false">
            <equals arg1="${ENVIRONMENT}" arg2="standalone" trim="true"/>
        </condition>
    </target>

    <target name="if.expand-default-attributes">
        <condition property="expand-default-attributes" value="true" else="false">
            <equals arg1="${EXPAND_DEFAULT_ATTRIBUTES}" arg2="true" trim="true"/>
        </condition>
    </target>

    <!-- Handle pre.hook -->
    <target name="run.prehook" depends="check-prehook">
        <fs:select-files dir="${data.dir}" pattern="${files-to-process}" includesFile="${includes_file}" filesetId="prehook_fs"/>
        <echo level="info" if:true="${prehook.present}">INFO: Running pre.hook</echo>
        <echo level="info" unless:true="${prehook.present}">INFO: No pre.hook</echo>

        <tempfile if:true="${prehook.present}" property="prehook.includes.file" destdir="${java.io.tmpdir}" prefix="includes-pre-" suffix=".txt" deleteonexit="true"/>
        <pathconvert if:true="${prehook.present}" property="prehook.list" pathsep="&#10;">
            <fileset refid="prehook_fs"/>
        </pathconvert>
        <echo if:true="${prehook.present}" file="${prehook.includes.file}" message="${prehook.list}"/>

        <exec if:true="${prehook.present}" executable="/var/task/pre.sh" resolveexecutable="true" failonerror="true">
            <arg value="${data.dir}"/>
            <arg value="--includes-file"/>
            <arg value="${prehook.includes.file}"/>
        </exec>
        <delete if:true="${prehook.present}" file="${prehook.includes.file}" quiet="true"/>
    </target>

    <target name="check-prehook">
        <available file="/var/task/pre.sh" property="prehook.present" value="true"/>
    </target>

    <!-- Handle post.hook -->
    <target name="run.posthook" depends="check-posthook">
        <fs:select-files dir="${data.dir}" pattern="${files-to-process}" includesFile="${includes_file}" filesetId="posthook_fs"/>
        <echo level="info" if:true="${posthook.present}">INFO: Running post.hook</echo>
        <echo level="info" unless:true="${posthook.present}">INFO: No post.hook</echo>

        <tempfile if:true="${posthook.present}" property="posthook.includes.file" destdir="${java.io.tmpdir}" prefix="includes-post-" suffix=".txt" deleteonexit="true"/>
        <pathconvert if:true="${posthook.present}" property="posthook.list" pathsep="&#10;">
            <fileset refid="posthook_fs"/>
        </pathconvert>
        <echo if:true="${posthook.present}" file="${posthook.includes.file}" message="${posthook.list}"/>

        <exec if:true="${posthook.present}" executable="/var/task/post.sh" resolveexecutable="true" failonerror="true">
            <arg value="${dist-pending.dir}"/>
            <arg value="--includes-file"/>
            <arg value="${posthook.includes.file}"/>
        </exec>
        <delete if:true="${posthook.present}" file="${posthook.includes.file}" quiet="true"/>
    </target>

    <target name="check-posthook">
        <available file="/var/task/post.sh" property="posthook.present" value="true"/>
    </target>

    <target name="cleanup">
        <echo level="info">INFO: Cleaning up previous build results</echo>
        <retry retrycount="6">
            <delete dir="${tmp.dir}" failonerror="no" />
        </retry>
        <retry retrycount="6">
            <delete dir="${dev.null}" failonerror="no" />
        </retry>
        <retry retrycount="6">
            <delete dir="${dist-pending.dir}" failonerror="no"/>
        </retry>
        <mkdir dir="${dist-pending.dir}"/>
    </target>

</project>
